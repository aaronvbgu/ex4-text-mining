setwd("~/Downloads/EX4/ex4-text-mining")
install.packages("readr")
install.packages("party")
install.packages("iterators")
install.packages("scales")
install.packages("pbkrtest")
install.packages("caret", dependencies = TRUE)
install.packages(Metrics)
install.packages(Metrics)
install.packages(metrics)
install.packages("Metrics")
library(readr)
train <- read_csv("train.csv")
test  <- read_csv("test.csv")
### Preprocessing
train$median_relevance <- factor(train$median_relevance)
# Preprocess the train data
train$query <- factor(substr(train$query,1,1))
train$product_title <- factor(tolower(substr(train$product_title,1,1)))
train$product_description <- factor(tolower(substr(train$product_description,1,1)))
# Preprocess the test data as well
test$query <- factor(substr(test$query,1,1))
test$product_title <- factor(tolower(substr(test$product_title,1,1)))
test$product_description <- factor(tolower(substr(test$product_description,1,1)))
levels(train$query) <- union(levels(train$query), levels(test$query))
levels(train$product_title) <- union(levels(train$product_title), levels(test$product_title))
levels(train$product_description) <- union(levels(train$product_description), levels(test$product_description))
levels(test$query) <- union(levels(train$query), levels(test$query))
levels(test$product_title) <- union(levels(train$product_title), levels(test$product_title))
levels(test$product_description) <- union(levels(train$product_description), levels(test$product_description))
### Train/test evaluation
inTraining <- sample(1:nrow(train),  .75*nrow(train))
training <- train[ inTraining,]
testing  <- train[-inTraining,]
### Model creation
library(randomForest)
model1 <- randomForest(median_relevance ~ query+product_title+product_description, data=training, ntree=3)
library(party)
library(caret)
model2 <- train(median_relevance ~ query+product_title+product_description, data = training,
method = "rpart",
trControl = trainControl(classProbs = F))
names(getModelInfo())
### Classification for evaluation
results1 <- predict(model1, newdata = testing)
results2 <- predict(model2, newdata = testing)
library(readr)
library(readr)
setwd("~/Downloads/EX4/ex4-text-mining")
setwd("~/Downloads/EX4/ex4-text-mining")
install.packages("readr")
install.packages("party")
install.packages("iterators")
install.packages("scales")
install.packages("pbkrtest")
install.packages("caret", dependencies = TRUE)
install.packages(Metrics)
library(readr)
train <- read_csv("train.csv")
test  <- read_csv("test.csv")
### Preprocessing
train$median_relevance <- factor(train$median_relevance)
# Preprocess the train data
train$query <- factor(substr(train$query,1,1))
train$product_title <- factor(tolower(substr(train$product_title,1,1)))
train$product_description <- factor(tolower(substr(train$product_description,1,1)))
# Preprocess the test data as well
test$query <- factor(substr(test$query,1,1))
test$product_title <- factor(tolower(substr(test$product_title,1,1)))
test$product_description <- factor(tolower(substr(test$product_description,1,1)))
levels(train$query) <- union(levels(train$query), levels(test$query))
levels(train$product_title) <- union(levels(train$product_title), levels(test$product_title))
levels(train$product_description) <- union(levels(train$product_description), levels(test$product_description))
levels(test$query) <- union(levels(train$query), levels(test$query))
levels(test$product_title) <- union(levels(train$product_title), levels(test$product_title))
levels(test$product_description) <- union(levels(train$product_description), levels(test$product_description))
### Train/test evaluation
inTraining <- sample(1:nrow(train),  .75*nrow(train))
training <- train[ inTraining,]
testing  <- train[-inTraining,]
### Model creation
library(randomForest)
model1 <- randomForest(median_relevance ~ query+product_title+product_description, data=training, ntree=3)
library(party)
library(caret)
model2 <- train(median_relevance ~ query+product_title+product_description, data = training,
method = "rpart",
trControl = trainControl(classProbs = F))
names(getModelInfo())
### Classification for evaluation
results1 <- predict(model1, newdata = testing)
results2 <- predict(model2, newdata = testing)
